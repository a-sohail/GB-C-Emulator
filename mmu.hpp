#ifndef mmu_hpp
#define mmu_hpp

#include <string>
#include "definitions.hpp"
#include "sprite.hpp"
#include "joypad.hpp"
#include "timer.hpp"
#include "apu.hpp"
#include "registers.hpp"

// 384 max tiles allowed in VRAM
#define MAX_TILES 384

// 2^16 spots
#define MAX_MEMORY 0x200000
#define GAMEBOY_MEMORY 65536

class MMU{
    
    BYTE memory[GAMEBOY_MEMORY];
    BYTE cartridgeMemory[MAX_MEMORY];
    BYTE ramMemory[0x8000];
    
    bool inBIOS = true;
    
    BYTE bootROM[256] = {
        0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
        0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
        0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
        0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
        0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
        0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
        0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
        0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
        0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
        0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
        0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
        0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
        0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
        0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,
        0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x00, 0x00, 0x23, 0x7D, 0xFE, 0x34, 0x20,
        0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x00, 0x00, 0x3E, 0x01, 0xE0, 0x50
    };
    
    void updateTileSet(WORD addr);
    void updateSpriteSet(WORD addr, BYTE val);
    void setPalette(BYTE palette[4][4], BYTE val);
    void dmaTransfer(const BYTE& val);
    
public:
    // Internal tile set of 8x8 pixels
    BYTE tileSet[MAX_TILES][8][8];
    
    // Internal Sprite Map
    SPRITE spriteSet[40];
    
    bool bgMap;
    bool bgTile;
    bool windowTile;
    bool switchBG;
    bool switchOBJ;
    bool switchLCD;
    bool switchWindow;
    bool spriteDoubled;
    
    BYTE scrollX;
    BYTE scrollY;
    
    BYTE windowX;
    BYTE windowY;
    
    int line = 0;
    
    // Given a pixel labelled 0-3, return an array with RGBA values
    BYTE palette[4][4];
    BYTE obj0Palette[4][4];
    BYTE obj1Palette[4][4];
    
    BYTE lcdStatRegister = 0;
    
    // Memory Banking
    bool mbc1 = false;
    BYTE romBankNumber = 0x01;
    BYTE ramBankNumber = 0x0;
    bool ramEnabled = false;
    bool romMode = true;
    
    void reset();
    
    void updateBanking();
    void handleBanking(WORD address, BYTE val);
    
    BYTE readByte(WORD address);
    void writeByte(WORD address, BYTE val);
    
    WORD readWord(WORD address);
    void writeWord(WORD address, WORD val);
    
    void readROM(const std::string& rom);
};

extern MMU mmu;

#endif /* mmu_hpp */
