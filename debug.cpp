#include "debug.hpp"
#include <iostream>
#include "mmu.hpp"

// Disassembler for debugging purposes

void disassembleExtendedOpcode(const BYTE& opcode){
    switch(opcode){
        case 0x00: std::cout << "RLC B"; break;
        case 0x01: std::cout << "RLC C"; break;
        case 0x02: std::cout << "RLC D"; break;
        case 0x03: std::cout << "RLC E"; break;
        case 0x04: std::cout << "RLC H"; break;
        case 0x05: std::cout << "RLC L"; break;
        case 0x07: std::cout << "RLC A"; break;
        case 0x06: std::cout << "RLC (HL)"; break;
        case 0x10: std::cout << "RL B"; break;
        case 0x11: std::cout << "RL C"; break;
        case 0x12: std::cout << "RL D"; break;
        case 0x13: std::cout << "RL E"; break;
        case 0x14: std::cout << "RL H"; break;
        case 0x15: std::cout << "RL L"; break;
        case 0x17: std::cout << "RL A"; break;
        case 0x16: std::cout << "RL (HL)"; break;
        case 0x08: std::cout << "RRC B"; break;
        case 0x09: std::cout << "RRC C"; break;
        case 0x0A: std::cout << "RRC D"; break;
        case 0x0B: std::cout << "RRC E"; break;
        case 0x0C: std::cout << "RRC H"; break;
        case 0x0D: std::cout << "RRC L"; break;
        case 0x0F: std::cout << "RRC A"; break;
        case 0x0E: std::cout << "RRC (HL)"; break;
        case 0x18: std::cout << "RR B"; break;
        case 0x19: std::cout << "RR C"; break;
        case 0x1A: std::cout << "RR D"; break;
        case 0x1B: std::cout << "RR E"; break;
        case 0x1C: std::cout << "RR H"; break;
        case 0x1D: std::cout << "RR L"; break;
        case 0x1F: std::cout << "RR A"; break;
        case 0x1E: std::cout << "RR (HL)"; break;
        case 0x20: std::cout << "SLA B"; break;
        case 0x21: std::cout << "SLA C"; break;
        case 0x22: std::cout << "SLA D"; break;
        case 0x23: std::cout << "SLA E"; break;
        case 0x24: std::cout << "SLA H"; break;
        case 0x25: std::cout << "SLA L"; break;
        case 0x27: std::cout << "SLA A"; break;
        case 0x26: std::cout << "SLA (HL)"; break;
        case 0x30: std::cout << "SWAP B"; break;
        case 0x31: std::cout << "SWAP C"; break;
        case 0x32: std::cout << "SWAP D"; break;
        case 0x33: std::cout << "SWAP E"; break;
        case 0x34: std::cout << "SWAP H"; break;
        case 0x35: std::cout << "SWAP L"; break;
        case 0x37: std::cout << "SWAP A"; break;
        case 0x36: std::cout << "SWAP (HL)"; break;
        case 0x28: std::cout << "SRA B"; break;
        case 0x29: std::cout << "SRA C"; break;
        case 0x2A: std::cout << "SRA D"; break;
        case 0x2B: std::cout << "SRA E"; break;
        case 0x2C: std::cout << "SRA H"; break;
        case 0x2D: std::cout << "SRA L"; break;
        case 0x2F: std::cout << "SRA A"; break;
        case 0x2E: std::cout << "SRA (HL)"; break;
        case 0x38: std::cout << "SRL B"; break;
        case 0x39: std::cout << "SRL C"; break;
        case 0x3A: std::cout << "SRL D"; break;
        case 0x3B: std::cout << "SRL E"; break;
        case 0x3C: std::cout << "SRL H"; break;
        case 0x3D: std::cout << "SRL L"; break;
        case 0x3F: std::cout << "SRL A"; break;
        case 0x3E: std::cout << "SRL (HL)"; break;
            // 1-Bit Operations
        case 0x40: std::cout << "BIT 0,B"; break;
        case 0x41: std::cout << "BIT 0,C"; break;
        case 0x42: std::cout << "BIT 0,D"; break;
        case 0x43: std::cout << "BIT 0,E"; break;
        case 0x44: std::cout << "BIT 0,H"; break;
        case 0x45: std::cout << "BIT 0,L"; break;
        case 0x47: std::cout << "BIT 0,A"; break;
        case 0x48: std::cout << "BIT 1,B"; break;
        case 0x49: std::cout << "BIT 1,C"; break;
        case 0x4A: std::cout << "BIT 1,D"; break;
        case 0x4B: std::cout << "BIT 1,E"; break;
        case 0x4C: std::cout << "BIT 1,H"; break;
        case 0x4D: std::cout << "BIT 1,L"; break;
        case 0x4F: std::cout << "BIT 1,A"; break;
        case 0x50: std::cout << "BIT 2,B"; break;
        case 0x51: std::cout << "BIT 2,C"; break;
        case 0x52: std::cout << "BIT 2,D"; break;
        case 0x53: std::cout << "BIT 2,E"; break;
        case 0x54: std::cout << "BIT 2,H"; break;
        case 0x55: std::cout << "BIT 2,L"; break;
        case 0x57: std::cout << "BIT 2,A"; break;
        case 0x58: std::cout << "BIT 3,B"; break;
        case 0x59: std::cout << "BIT 3,C"; break;
        case 0x5A: std::cout << "BIT 3,D"; break;
        case 0x5B: std::cout << "BIT 3,E"; break;
        case 0x5C: std::cout << "BIT 3,H"; break;
        case 0x5D: std::cout << "BIT 3,L"; break;
        case 0x5F: std::cout << "BIT 3,A"; break;
        case 0x60: std::cout << "BIT 4,B"; break;
        case 0x61: std::cout << "BIT 4,C"; break;
        case 0x62: std::cout << "BIT 4,D"; break;
        case 0x63: std::cout << "BIT 4,E"; break;
        case 0x64: std::cout << "BIT 4,H"; break;
        case 0x65: std::cout << "BIT 4,L"; break;
        case 0x67: std::cout << "BIT 4,A"; break;
        case 0x68: std::cout << "BIT 5,B"; break;
        case 0x69: std::cout << "BIT 5,C"; break;
        case 0x6A: std::cout << "BIT 5,D"; break;
        case 0x6B: std::cout << "BIT 5,E"; break;
        case 0x6C: std::cout << "BIT 5,H"; break;
        case 0x6D: std::cout << "BIT 5,L"; break;
        case 0x6F: std::cout << "BIT 5,A"; break;
        case 0x70: std::cout << "BIT 6,B"; break;
        case 0x71: std::cout << "BIT 6,C"; break;
        case 0x72: std::cout << "BIT 6,D"; break;
        case 0x73: std::cout << "BIT 6,E"; break;
        case 0x74: std::cout << "BIT 6,H"; break;
        case 0x75: std::cout << "BIT 6,L"; break;
        case 0x77: std::cout << "BIT 6,A"; break;
        case 0x78: std::cout << "BIT 7,B"; break;
        case 0x79: std::cout << "BIT 7,C"; break;
        case 0x7A: std::cout << "BIT 7,D"; break;
        case 0x7B: std::cout << "BIT 7,E"; break;
        case 0x7C: std::cout << "BIT 7,H"; break;
        case 0x7D: std::cout << "BIT 7,L"; break;
        case 0x7F: std::cout << "BIT 7,A"; break;
        case 0x46: std::cout << "BIT 0,(HL)"; break;
        case 0x4E: std::cout << "BIT 1,(HL)"; break;
        case 0x56: std::cout << "BIT 2,(HL)"; break;
        case 0x5E: std::cout << "BIT 3,(HL)"; break;
        case 0x66: std::cout << "BIT 4,(HL)"; break;
        case 0x6E: std::cout << "BIT 5,(HL)"; break;
        case 0x76: std::cout << "BIT 6,(HL)"; break;
        case 0x7E: std::cout << "BIT 7,(HL)"; break;
        case 0xC0: std::cout << "SET 0,B"; break;
        case 0xC1: std::cout << "SET 0,C"; break;
        case 0xC2: std::cout << "SET 0,D"; break;
        case 0xC3: std::cout << "SET 0,E"; break;
        case 0xC4: std::cout << "SET 0,H"; break;
        case 0xC5: std::cout << "SET 0,L"; break;
        case 0xC7: std::cout << "SET 0,A"; break;
        case 0xC8: std::cout << "SET 1,B"; break;
        case 0xC9: std::cout << "SET 1,C"; break;
        case 0xCA: std::cout << "SET 1,D"; break;
        case 0xCB: std::cout << "SET 1,E"; break;
        case 0xCC: std::cout << "SET 1,H"; break;
        case 0xCD: std::cout << "SET 1,L"; break;
        case 0xCF: std::cout << "SET 1,A"; break;
        case 0xD0: std::cout << "SET 2,B"; break;
        case 0xD1: std::cout << "SET 2,C"; break;
        case 0xD2: std::cout << "SET 2,D"; break;
        case 0xD3: std::cout << "SET 2,E"; break;
        case 0xD4: std::cout << "SET 2,H"; break;
        case 0xD5: std::cout << "SET 2,L"; break;
        case 0xD7: std::cout << "SET 2,A"; break;
        case 0xD8: std::cout << "SET 3,B"; break;
        case 0xD9: std::cout << "SET 3,C"; break;
        case 0xDA: std::cout << "SET 3,D"; break;
        case 0xDB: std::cout << "SET 3,E"; break;
        case 0xDC: std::cout << "SET 3,H"; break;
        case 0xDD: std::cout << "SET 3,L"; break;
        case 0xDF: std::cout << "SET 3,A"; break;
        case 0xE0: std::cout << "SET 4,B"; break;
        case 0xE1: std::cout << "SET 4,C"; break;
        case 0xE2: std::cout << "SET 4,D"; break;
        case 0xE3: std::cout << "SET 4,E"; break;
        case 0xE4: std::cout << "SET 4,H"; break;
        case 0xE5: std::cout << "SET 4,L"; break;
        case 0xE7: std::cout << "SET 4,A"; break;
        case 0xE8: std::cout << "SET 5,B"; break;
        case 0xE9: std::cout << "SET 5,C"; break;
        case 0xEA: std::cout << "SET 5,D"; break;
        case 0xEB: std::cout << "SET 5,E"; break;
        case 0xEC: std::cout << "SET 5,H"; break;
        case 0xED: std::cout << "SET 5,L"; break;
        case 0xEF: std::cout << "SET 5,A"; break;
        case 0xF0: std::cout << "SET 6,B"; break;
        case 0xF1: std::cout << "SET 6,C"; break;
        case 0xF2: std::cout << "SET 6,D"; break;
        case 0xF3: std::cout << "SET 6,E"; break;
        case 0xF4: std::cout << "SET 6,H"; break;
        case 0xF5: std::cout << "SET 6,L"; break;
        case 0xF7: std::cout << "SET 6,A"; break;
        case 0xF8: std::cout << "SET 7,B"; break;
        case 0xF9: std::cout << "SET 7,C"; break;
        case 0xFA: std::cout << "SET 7,D"; break;
        case 0xFB: std::cout << "SET 7,E"; break;
        case 0xFC: std::cout << "SET 7,H"; break;
        case 0xFD: std::cout << "SET 7,L"; break;
        case 0xFF: std::cout << "SET 7,A"; break;
        case 0xC6: std::cout << "SET 0,(HL)"; break;
        case 0xCE: std::cout << "SET 1,(HL)"; break;
        case 0xD6: std::cout << "SET 2,(HL)"; break;
        case 0xDE: std::cout << "SET 3,(HL)"; break;
        case 0xE6: std::cout << "SET 4,(HL)"; break;
        case 0xEE: std::cout << "SET 5,(HL)"; break;
        case 0xF6: std::cout << "SET 6,(HL)"; break;
        case 0xFE: std::cout << "SET 7,(HL)"; break;
        case 0x80: std::cout << "RES 0,B"; break;
        case 0x81: std::cout << "RES 0,C"; break;
        case 0x82: std::cout << "RES 0,D"; break;
        case 0x83: std::cout << "RES 0,E"; break;
        case 0x84: std::cout << "RES 0,H"; break;
        case 0x85: std::cout << "RES 0,L"; break;
        case 0x87: std::cout << "RES 0,A"; break;
        case 0x88: std::cout << "RES 1,B"; break;
        case 0x89: std::cout << "RES 1,C"; break;
        case 0x8A: std::cout << "RES 1,D"; break;
        case 0x8B: std::cout << "RES 1,E"; break;
        case 0x8C: std::cout << "RES 1,H"; break;
        case 0x8D: std::cout << "RES 1,L"; break;
        case 0x8F: std::cout << "RES 1,A"; break;
        case 0x90: std::cout << "RES 2,B"; break;
        case 0x91: std::cout << "RES 2,C"; break;
        case 0x92: std::cout << "RES 2,D"; break;
        case 0x93: std::cout << "RES 2,E"; break;
        case 0x94: std::cout << "RES 2,H"; break;
        case 0x95: std::cout << "RES 2,L"; break;
        case 0x97: std::cout << "RES 2,A"; break;
        case 0x98: std::cout << "RES 3,B"; break;
        case 0x99: std::cout << "RES 3,C"; break;
        case 0x9A: std::cout << "RES 3,D"; break;
        case 0x9B: std::cout << "RES 3,E"; break;
        case 0x9C: std::cout << "RES 3,H"; break;
        case 0x9D: std::cout << "RES 3,L"; break;
        case 0x9F: std::cout << "RES 3,A"; break;
        case 0xA0: std::cout << "RES 4,B"; break;
        case 0xA1: std::cout << "RES 4,C"; break;
        case 0xA2: std::cout << "RES 4,D"; break;
        case 0xA3: std::cout << "RES 4,E"; break;
        case 0xA4: std::cout << "RES 4,H"; break;
        case 0xA5: std::cout << "RES 4,L"; break;
        case 0xA7: std::cout << "RES 4,A"; break;
        case 0xA8: std::cout << "RES 5,B"; break;
        case 0xA9: std::cout << "RES 5,C"; break;
        case 0xAA: std::cout << "RES 5,D"; break;
        case 0xAB: std::cout << "RES 5,E"; break;
        case 0xAC: std::cout << "RES 5,H"; break;
        case 0xAD: std::cout << "RES 5,L"; break;
        case 0xAF: std::cout << "RES 5,A"; break;
        case 0xB0: std::cout << "RES 6,B"; break;
        case 0xB1: std::cout << "RES 6,C"; break;
        case 0xB2: std::cout << "RES 6,D"; break;
        case 0xB3: std::cout << "RES 6,E"; break;
        case 0xB4: std::cout << "RES 6,H"; break;
        case 0xB5: std::cout << "RES 6,L"; break;
        case 0xB7: std::cout << "RES 6,A"; break;
        case 0xB8: std::cout << "RES 7,B"; break;
        case 0xB9: std::cout << "RES 7,C"; break;
        case 0xBA: std::cout << "RES 7,D"; break;
        case 0xBB: std::cout << "RES 7,E"; break;
        case 0xBC: std::cout << "RES 7,H"; break;
        case 0xBD: std::cout << "RES 7,L"; break;
        case 0xBF: std::cout << "RES 7,A"; break;
        case 0x86: std::cout << "RES 0,(HL)"; break;
        case 0x8E: std::cout << "RES 1,(HL)"; break;
        case 0x96: std::cout << "RES 2,(HL)"; break;
        case 0x9E: std::cout << "RES 3,(HL)"; break;
        case 0xA6: std::cout << "RES 4,(HL)"; break;
        case 0xAE: std::cout << "RES 5,(HL)"; break;
        case 0xB6: std::cout << "RES 6,(HL)"; break;
        case 0xBE: std::cout << "RES 7,(HL)"; break;
        default: assert(false);
    }
}

void disassembleOpcode(const BYTE& opcode){
    switch(opcode){
            // 8-Bit Loads
        case 0x78: std::cout << "LD A,B"; break;
        case 0x79: std::cout << "LD A,C"; break;
        case 0x7A: std::cout << "LD A,D"; break;
        case 0x7B: std::cout << "LD A,E"; break;
        case 0x7C: std::cout << "LD A,H"; break;
        case 0x7D: std::cout << "LD A,L"; break;
        case 0x7F: std::cout << "LD A,A"; break;
        case 0x40: std::cout << "LD B,B"; break;
        case 0x41: std::cout << "LD B,C"; break;
        case 0x42: std::cout << "LD B,D"; break;
        case 0x43: std::cout << "LD B,E"; break;
        case 0x44: std::cout << "LD B,H"; break;
        case 0x45: std::cout << "LD B,L"; break;
        case 0x47: std::cout << "LD B,A"; break;
        case 0x48: std::cout << "LD C,B"; break;
        case 0x49: std::cout << "LD C,C"; break;
        case 0x4A: std::cout << "LD C,D"; break;
        case 0x4B: std::cout << "LD C,E"; break;
        case 0x4C: std::cout << "LD C,H"; break;
        case 0x4D: std::cout << "LD C,L"; break;
        case 0x4F: std::cout << "LD C,A"; break;
        case 0x50: std::cout << "LD D,B"; break;
        case 0x51: std::cout << "LD D,C"; break;
        case 0x52: std::cout << "LD D,D"; break;
        case 0x53: std::cout << "LD D,E"; break;
        case 0x54: std::cout << "LD D,H"; break;
        case 0x55: std::cout << "LD D,L"; break;
        case 0x57: std::cout << "LD D,A"; break;
        case 0x58: std::cout << "LD E,B"; break;
        case 0x59: std::cout << "LD E,C"; break;
        case 0x5A: std::cout << "LD E,D"; break;
        case 0x5B: std::cout << "LD E,E"; break;
        case 0x5C: std::cout << "LD E,H"; break;
        case 0x5D: std::cout << "LD E,L"; break;
        case 0x5F: std::cout << "LD E,A"; break;
        case 0x60: std::cout << "LD H,B"; break;
        case 0x61: std::cout << "LD H,C"; break;
        case 0x62: std::cout << "LD H,D"; break;
        case 0x63: std::cout << "LD H,E"; break;
        case 0x64: std::cout << "LD H,H"; break;
        case 0x65: std::cout << "LD H,L"; break;
        case 0x67: std::cout << "LD H,A"; break;
        case 0x68: std::cout << "LD L,B"; break;
        case 0x69: std::cout << "LD L,C"; break;
        case 0x6A: std::cout << "LD L,D"; break;
        case 0x6B: std::cout << "LD L,E"; break;
        case 0x6C: std::cout << "LD L,H"; break;
        case 0x6D: std::cout << "LD L,L"; break;
        case 0x6F: std::cout << "LD L,A"; break;
        case 0x3E: std::cout << "LD A,$" << (int) mmu.readByte(PC); break;
        case 0x06: std::cout << "LD B,$" << (int) mmu.readByte(PC); break;
        case 0x0E: std::cout << "LD C,$" << (int) mmu.readByte(PC); break;
        case 0x16: std::cout << "LD D,$" << (int) mmu.readByte(PC); break;
        case 0x1E: std::cout << "LD E,$" << (int) mmu.readByte(PC); break;
        case 0x26: std::cout << "LD H,$" << (int) mmu.readByte(PC); break;
        case 0x2E: std::cout << "LD L,$" << (int) mmu.readByte(PC); break;
        case 0x7E: std::cout << "LD A,(HL)"; break;
        case 0x46: std::cout << "LD B,(HL)"; break;
        case 0x4E: std::cout << "LD C,(HL)"; break;
        case 0x56: std::cout << "LD D,(HL)"; break;
        case 0x5E: std::cout << "LD E,(HL)"; break;
        case 0x66: std::cout << "LD H,(HL)"; break;
        case 0x6E: std::cout << "LD L,(HL)"; break;
        case 0x70: std::cout << "LD (HL),B"; break;
        case 0x71: std::cout << "LD (HL),C"; break;
        case 0x72: std::cout << "LD (HL),D"; break;
        case 0x73: std::cout << "LD (HL),E"; break;
        case 0x74: std::cout << "LD (HL),H"; break;
        case 0x75: std::cout << "LD (HL),L"; break;
        case 0x77: std::cout << "LD (HL),B"; break;
        case 0x36: std::cout << "LD (HL),$" << (int) mmu.readByte(PC); break;
        case 0x0A: std::cout << "LD A,(BC)"; break;
        case 0x1A: std::cout << "LD A,(DE)"; break;
        case 0xFA: std::cout << "LD A,$" << (int) mmu.readByte(mmu.readWord(PC)); break;
        case 0x02: std::cout << "LD (BC),A"; break;
        case 0x12: std::cout << "LD (DE),A"; break;
        case 0xEA: std::cout << "LD ($" << (int) mmu.readWord(PC) << "),A"; break;
        case 0x08: std::cout << "LD ($" << (int) mmu.readWord(PC) << "),SP"; break;
        case 0xF0: std::cout << "LD A,$" << (int) (0xFF00 + mmu.readByte(PC)); break;
        case 0xE0: std::cout << "LD ($" << (int) (0xFF00 + mmu.readByte(PC)) << "),A"; break;
        case 0xF2: std::cout << "LD A,($ff00+C)"; break;
        case 0xE2: std::cout << "LD ($ff00+C),A"; break;
        case 0x22: std::cout << "LDI (HL),A"; break;
        case 0x2A: std::cout << "LD A,(HL+)"; break;
        case 0x32: std::cout << "LD (HL-),A"; break;
        case 0x3A: std::cout << "LD A,(HL-)"; break;
            // 16-Bit Loads
        case 0x01: std::cout << "LD BC,$" << (int) mmu.readWord(PC); break;
        case 0x11: std::cout << "LD DE,$" << (int) mmu.readWord(PC); break;
        case 0x21: std::cout << "LD HL,$" << (int) mmu.readWord(PC); break;
        case 0x31: std::cout << "LD SP,$" << (int) mmu.readWord(PC); break;
        case 0xF9: std::cout << "LD SP,HL"; break;
        case 0xC5: std::cout << "PUSH BC"; break;
        case 0xD5: std::cout << "PUSH DE"; break;
        case 0xE5: std::cout << "PUSH HL"; break;
        case 0xF5: std::cout << "PUSH AF"; break;
        case 0xC1: std::cout << "POP BC"; break;
        case 0xD1: std::cout << "POP DE"; break;
        case 0xE1: std::cout << "POP HL"; break;
        case 0xF1: std::cout << "POP AF"; break;
            // 8-Bit Arithmetic
        case 0x80: std::cout << "ADD A,B"; break;
        case 0x81: std::cout << "ADD A,C"; break;
        case 0x82: std::cout << "ADD A,D"; break;
        case 0x83: std::cout << "ADD A,E"; break;
        case 0x84: std::cout << "ADD A,H"; break;
        case 0x85: std::cout << "ADD A,L"; break;
        case 0x87: std::cout << "ADD A,A"; break;
        case 0xC6: std::cout << "ADD A,$" << (int) mmu.readByte(PC); break;
        case 0x86: std::cout << "ADD A,(HL)"; break;
        case 0x88: std::cout << "ADC A,B"; break;
        case 0x89: std::cout << "ADC A,C"; break;
        case 0x8A: std::cout << "ADC A,D"; break;
        case 0x8B: std::cout << "ADC A,E"; break;
        case 0x8C: std::cout << "ADC A,H"; break;
        case 0x8D: std::cout << "ADC A,L"; break;
        case 0x8F: std::cout << "ADC A,A"; break;
        case 0xCE: std::cout << "ADC A,$" << (int) mmu.readByte(PC); break;
        case 0x8E: std::cout << "ADC A,(HL)"; break;
        case 0x90: std::cout << "SUB B"; break;
        case 0x91: std::cout << "SUB C"; break;
        case 0x92: std::cout << "SUB D"; break;
        case 0x93: std::cout << "SUB E"; break;
        case 0x94: std::cout << "SUB H"; break;
        case 0x95: std::cout << "SUB L"; break;
        case 0x97: std::cout << "SUB A"; break;
        case 0xD6: std::cout << "SUB $" << (int) mmu.readByte(PC); break;
        case 0x96: std::cout << "SUB (HL)"; break;
        case 0x98: std::cout << "SBC B"; break;
        case 0x99: std::cout << "SBC C"; break;
        case 0x9A: std::cout << "SBC D"; break;
        case 0x9B: std::cout << "SBC E"; break;
        case 0x9C: std::cout << "SBC H"; break;
        case 0x9D: std::cout << "SBC L"; break;
        case 0x9F: std::cout << "SBC A"; break;
        case 0xDE: std::cout << "SBC $" << (int) mmu.readByte(PC); break;
        case 0x9E: std::cout << "SBC (HL)"; break;
        case 0xA0: std::cout << "AND B"; break;
        case 0xA1: std::cout << "AND C"; break;
        case 0xA2: std::cout << "AND D"; break;
        case 0xA3: std::cout << "AND E"; break;
        case 0xA4: std::cout << "AND H"; break;
        case 0xA5: std::cout << "AND L"; break;
        case 0xA7: std::cout << "AND A"; break;
        case 0xE6: std::cout << "AND $" << (int) mmu.readByte(PC); break;
        case 0xA6: std::cout << "AND (HL)"; break;
        case 0xA8: std::cout << "XOR B"; break;
        case 0xA9: std::cout << "XOR C"; break;
        case 0xAA: std::cout << "XOR D"; break;
        case 0xAB: std::cout << "XOR E"; break;
        case 0xAC: std::cout << "XOR H"; break;
        case 0xAD: std::cout << "XOR L"; break;
        case 0xAF: std::cout << "XOR A"; break;
        case 0xEE: std::cout << "XOR $" << (int) mmu.readByte(PC); break;
        case 0xAE: std::cout << "XOR (HL)"; break;
        case 0xB0: std::cout << "OR B"; break;
        case 0xB1: std::cout << "OR C"; break;
        case 0xB2: std::cout << "OR D"; break;
        case 0xB3: std::cout << "OR E"; break;
        case 0xB4: std::cout << "OR H"; break;
        case 0xB5: std::cout << "OR L"; break;
        case 0xB7: std::cout << "OR A"; break;
        case 0xF6: std::cout << "OR $" << (int) mmu.readByte(PC); break;
        case 0xB6: std::cout << "OR (HL)"; break;
        case 0xB8: std::cout << "CP B"; break;
        case 0xB9: std::cout << "CP C"; break;
        case 0xBA: std::cout << "CP D"; break;
        case 0xBB: std::cout << "CP E"; break;
        case 0xBC: std::cout << "CP H"; break;
        case 0xBD: std::cout << "CP L"; break;
        case 0xBF: std::cout << "CP A"; break;
        case 0xFE: std::cout << "CP $" << (int) mmu.readByte(PC); break;
        case 0xBE: std::cout << "CP (HL)"; break;
        case 0x04: std::cout << "INC B"; break;
        case 0x0C: std::cout << "INC C"; break;
        case 0x14: std::cout << "INC D"; break;
        case 0x1C: std::cout << "INC E"; break;
        case 0x24: std::cout << "INC H"; break;
        case 0x2C: std::cout << "INC L"; break;
        case 0x3C: std::cout << "INC A"; break;
        case 0x34: std::cout << "INC (HL)"; break;
        case 0x05: std::cout << "DEC B"; break;
        case 0x0D: std::cout << "DEC C"; break;
        case 0x15: std::cout << "DEC D"; break;
        case 0x1D: std::cout << "DEC E"; break;
        case 0x25: std::cout << "DEC H"; break;
        case 0x2D: std::cout << "DEC L"; break;
        case 0x3D: std::cout << "DEC A"; break;
        case 0x35: std::cout << "DEC (HL)"; break;
        case 0x27: std::cout << "DAA"; break;
        case 0x2F: std::cout << "CPL"; break;
            // 16-Bit Arithmetic/Logical Commands
        case 0x09: std::cout << "ADD HL,BC"; break;
        case 0x19: std::cout << "ADD HL,DE"; break;
        case 0x29: std::cout << "ADD HL,HL"; break;
        case 0x39: std::cout << "ADD HL,SP"; break;
        case 0x03: std::cout << "INC BC"; break;
        case 0x13: std::cout << "INC DE"; break;
        case 0x23: std::cout << "INC HL"; break;
        case 0x33: std::cout << "INC SP"; break;
        case 0x0B: std::cout << "DEC BC"; break;
        case 0x1B: std::cout << "DEC DE"; break;
        case 0x2B: std::cout << "DEC HL"; break;
        case 0x3B: std::cout << "DEC SP"; break;
        case 0xE8: std::cout << "ADD SP,$" << (int) mmu.readByte(PC); break;
        case 0xF8: std::cout << "LD HL,SP+$" << (int) mmu.readByte(PC); break;
            // Rotate and Shift Commands
        case 0x07: std::cout << "RLCA"; break;
        case 0x17: std::cout << "RLA"; break;
        case 0x0F: std::cout << "RRCA"; break;
        case 0x1F: std::cout << "RRA"; break;
            // Includes the rotate/shift + 1-bit operations
        case 0xCB: return disassembleExtendedOpcode(mmu.readByte(PC));
            // CPU-Control Commands
        case 0x3F: std::cout << "CCF"; break;
        case 0x37: std::cout << "SCF"; break;
        case 0x00: std::cout << "NOP"; break;
        case 0x76: std::cout << "HALT"; break;
        case 0x10: std::cout << "STOP 0"; break;
        case 0xF3: std::cout << "DI"; break;
        case 0xFB: std::cout << "EI"; break;
            // Jump Commands
        case 0xC3: std::cout << "JP $" << (int) mmu.readWord(PC); break;
        case 0xE9: std::cout << "JP (HL)"; break;
        case 0xC2: std::cout << "JP NZ,$" << (int) mmu.readWord(PC); break;
        case 0xCA: std::cout << "JP Z,$" << (int) mmu.readWord(PC); break;
        case 0xD2: std::cout << "JP NC,$" << (int) mmu.readWord(PC); break;
        case 0xDA: std::cout << "JP C,$" << (int) mmu.readWord(PC); break;
        case 0x18: std::cout << "JR $" << (int) (PC + (SIGNED_BYTE) mmu.readByte(PC)); break;
        case 0x20: std::cout << "JR NZ,$" << (int) (PC + (SIGNED_BYTE) mmu.readByte(PC)); break;
        case 0x28: std::cout << "JR Z,$" << (int) (PC + (SIGNED_BYTE) mmu.readByte(PC)); break;
        case 0x30: std::cout << "JR NC,$" << (int) (PC + (SIGNED_BYTE) mmu.readByte(PC)); break;
        case 0x38: std::cout << "JR C,$" << (int) (PC + (SIGNED_BYTE) mmu.readByte(PC)); break;
        case 0xCD: std::cout << "CALL $" << (int) mmu.readWord(PC); break;
        case 0xC4: std::cout << "CALL NZ,$" << (int) mmu.readWord(PC); break;
        case 0xCC: std::cout << "CALL Z,$" << (int) mmu.readWord(PC); break;
        case 0xD4: std::cout << "CALL NC,$" << (int) mmu.readWord(PC); break;
        case 0xDC: std::cout << "CALL C,$" << (int) mmu.readWord(PC); break;
        case 0xC9: std::cout << "RET"; break;
        case 0xC0: std::cout << "RET NZ"; break;
        case 0xC8: std::cout << "RET Z"; break;
        case 0xD0: std::cout << "RET NC"; break;
        case 0xD8: std::cout << "RET C"; break;
        case 0xD9: std::cout << "RETI"; break;
        case 0xC7: std::cout << "RST $0000"; break;
        case 0xCF: std::cout << "RST $0008"; break;
        case 0xD7: std::cout << "RST $0010"; break;
        case 0xDF: std::cout << "RST $0018"; break;
        case 0xE7: std::cout << "RST $0020"; break;
        case 0xEF: std::cout << "RST $0028"; break;
        case 0xF7: std::cout << "RST $0030"; break;
        case 0xFF: std::cout << "RST $0038"; break;
        default: assert(false);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void printState(){
    std::cout << std::hex;
    std::cout << "PC: " << PC << std::endl;
    std::cout << "[";
    std::cout << "AF: $" << AF.reg << " |";
    std::cout << " BC: $" << BC.reg << " |";
    std::cout << " DE: $" << DE.reg << " |";
    std::cout << " HL: $" << HL.reg << " |";
    std::cout << " SP: $" << SP.reg;
    std::cout << "]" << std::endl;
}

void printLog(){
    disassembleOpcode(mmu.readByte(PC++));
    PC--;
    std::cout << std::endl;
    printState();
}

void printTileSet(){
    for(int i = 0; i < 384; i++){
        for(int y = 0; y < 8; y++){
            for(int x = 0; x < 8; x++){
                std::cout << (int) mmu.tileSet[i][y][x];
            }
            std::cout << std::endl;
        }
        std::cout << std::endl;
    }
}

void printTileMap(){
    for(int y = 0; y < 32; y++){
        for(int x = 0; x < 32; x++){
            int p = (int) mmu.readByte(0x9800 + ((y * 32) + x));
            if(p < 10){
                std::cout << "00";
            }
            else if(p < 100){
                std::cout << "0";
            }
            std::cout << p;
        }
        std::cout << std::endl;
    }
}

Debug debug;
